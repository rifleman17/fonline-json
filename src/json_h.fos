#ifndef __JSON_H__
#define __JSON_H__

//  Uncomment the line below if you are using FOnline revision 399 or earlier.
//  #define _JSON_REV_PRE400

shared interface JSON
{
    ////////////////////////////////////////////////////////////////////////////
    //
    //  Checking the type of a JSON value.
    //
    bool isUndefined();
    bool isNull();
    bool isBoolean();
    bool isString();
    bool isNumber();
    bool isObject();
    bool isArray();

    ////////////////////////////////////////////////////////////////////////////
    //
    //  Retrieving data from a JSON value.
    //
    JSON@ opShr(bool& value);
    JSON@ opShr(string& value);
    JSON@ opShr(int8& value);
    JSON@ opShr(int16& value);
    JSON@ opShr(int32& value);
    JSON@ opShr(int64& value);
    JSON@ opShr(uint8& value);
    JSON@ opShr(uint16& value);
    JSON@ opShr(uint32& value);
    JSON@ opShr(uint64& value);
    JSON@ opShr(float& value);
    JSON@ opShr(double& value);

    ////////////////////////////////////////////////////////////////////////////
    //
    //    Storing data in a JSON value.
    //
    JSON@ opShl(const bool value);
    JSON@ opShl(const string& value);
    JSON@ opShl(const int8 value);
    JSON@ opShl(const int16 value);
    JSON@ opShl(const int32 value);
    JSON@ opShl(const int64 value);
    JSON@ opShl(const uint8 value);
    JSON@ opShl(const uint16 value);
    JSON@ opShl(const uint32 value);
    JSON@ opShl(const uint64 value);
    JSON@ opShl(const float value);
    JSON@ opShl(const double value);

    ////////////////////////////////////////////////////////////////////////////
    //
    //    Stuff for JSON Objects.
    //
    bool hasProperty(const string& key);
    void setProperty(const string& key, JSON@ value);
    array<string> getKeys();
    JSON@ opIndex(const string& key);

    ////////////////////////////////////////////////////////////////////////////
    //
    //  Stuff for JSON Arrays.
    //
    uint length();
    void push(JSON@ value);
    JSON@ opIndex(const uint index);
    
    ////////////////////////////////////////////////////////////////////////////
    //
    //  Because of a bug in old AngelScript, JSON::forEach is available only in
    //  FOnline revisions 400+. Earlier revisions can use equivalent functions
    //  implemented directly in this header file. If you want to keep the code
    //  compatible for both cases, use _JSON_ForEach() macro for iteration.
    //
    #ifndef _JSON_REV_PRE400
        void forEach(JSONForEachIndex@ callback);
        void forEach(JSONForEachIndexAll@ callback);
        void forEach(JSONForEachKey@ callback);
        void forEach(JSONForEachKeyAll@ callback);
        #define _JSON_ForEach #(_value, _callback) _value.forEach(_callback)
    #endif

    ////////////////////////////////////////////////////////////////////////////
    //
    //  Stringification - converts a JSON value into a valid JSON text.
    //  Default indentation style is two spaces.
    //  TODO: Right now it's possible to pass anything to indentStyle and
    //  indentStart. At least indentStyle should be checked.
    //
    string@ stringify();
    string@ stringify(const string& indentStyle);
    string@ stringify(const string& indentStyle, string& indentStart);
}

////////////////////////////////////////////////////////////////////////////////
//
//  ForEach for revisions 399 and earlier.
//
#ifdef _JSON_REV_PRE400
    void JSONForEach(JSON@ value, JSONForEachIndex@ callback)
    {
        if (@value != null && value.isArray())
        {
            for (uint i = 0, j = value.length(); i < j; i += 1)
            {
                callback(value[i], i);
            }
        }
    }
    void JSONForEach(JSON@ value, JSONForEachIndexAll@ callback)
    {
        if (@value != null && value.isArray())
        {
            for (uint i = 0, j = value.length(); i < j; i += 1)
            {
                callback(value[i], i, value);
            }
        }
    }
    void JSONForEach(JSON@ value, JSONForEachKey@ callback)
    {
        if (@value != null && value.isObject())
        {
            array<string> keys = value.getKeys();
            for (uint i = 0, j = keys.length(); i < j; i += 1)
            {
                callback(value[keys[i]], keys[i]);
            }
        }
    }
    void JSONForEach(JSON@ value, JSONForEachKeyAll@ callback)
    {
        if (@value != null && value.isObject())
        {
            array<string> keys = value.getKeys();
            for (uint i = 0, j = keys.length(); i < j; i += 1)
            {
                callback(value[keys[i]], keys[i], value);
            }
        }
    }
    #define _JSON_ForEach #(_value, _callback) JSONForEach(_value, _callback)
#endif


////////////////////////////////////////////////////////////////////////////////
//
// Funcdefs of ForEach callbacks.
//
funcdef void JSONForEachKey(JSON@ value, const string& key);
funcdef void JSONForEachKeyAll(JSON@ value, const string& key, JSON@ all);
funcdef void JSONForEachIndex(JSON@ value, uint index);
funcdef void JSONForEachIndexAll(JSON@ value, uint index, JSON@ all);


////////////////////////////////////////////////////////////////////////////////
//
//  Imports
//
#ifndef __JSON__
    import JSON@ JSONLoad(const string& path)
        from "json";
    import bool JSONSave(JSON@ value, const string& path)
        from "json";
    import bool JSONSave(JSON@ value, const string& path, const string& indent)
        from "json";
#endif


#endif // __JSON_H__
