/******************************************************************************
 *                                                                            *
 *  TOKENIZER                                                                 *
 *  Takes a JSON text and produces an array of JSON tokens.                   *
 *                                                                            *
 ******************************************************************************/

enum TokenType
{
    LEFT_SQUARE_BRACKET  = '[',
    RIGHT_SQUARE_BRACKET = ']',
    LEFT_CURLY_BRACKET   = '{',
    RIGHT_CURLY_BRACKET  = '}',
    COMMA                = ',',
    COLON                = ':',
    TRUE                 = 't',
    FALSE                = 'f',
    NULL                 = 'n',
    STRING               = '"',
    NUMBER               = '#'
}

class Token
{
    TokenType type;
    string value;

    uint row;
    uint col;

    Token(TokenType type, string value)
    {
        this.type = type;
        this.value = value;
    }
    string@ name()
    {
        switch (this.type)
        {
            case LEFT_SQUARE_BRACKET:
                return "[";
            case RIGHT_SQUARE_BRACKET:
                return "]";
            case LEFT_CURLY_BRACKET:
                return "{";
            case RIGHT_CURLY_BRACKET:
                return "}";
            case COMMA:
                return ",";
            case COLON:
                return ":";
            case TRUE:
                return "true";
            case FALSE:
                return "false";
            case NULL:
                return "null";
            case STRING:
                return "string";
            case NUMBER:
                return "number";
        }
        return "unknown";
    }
}


//  Returns true if reached end of text
bool growToken(string@ tokenValue, uint& tokenLength, uint& offset, uint length, uint8 character)
{
    tokenLength += 1;
    _CharAdd(tokenValue, character);
    offset += 1;
    return offset >= length;
}


bool eatNumberToken(const string& text, uint& offset, uint length, array<Token@>@ tokens)
{
    string tokenValue = "";
    uint tokenLength = 0;

    if (_CharGet(text, offset) == '-')
    {
        if (growToken(tokenValue, tokenLength, offset, length, '-'))
        {
            return false;
        }
    }
    if (_CharGet(text, offset) == '0')
    {
        if (growToken(tokenValue, tokenLength, offset, length, '0'))
        {
            tokens.insertLast(@Token(NUMBER, tokenValue));
            offset += 1;
            return true;
        }
    }
    else if (_CharGet(text, offset) >= '1' && _CharGet(text, offset) <= '9')
    {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            tokens.insertLast(@Token(NUMBER, tokenValue));
            offset += 1;
            return true;
        }
        while (offset < length)
        {
            if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
            {
                if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
                {
                    tokens.insertLast(@Token(NUMBER, tokenValue));
                    offset += 1;
                    return true;
                }
            }
            else
            {
                break;
            }
        }
    }
    if (_CharGet(text, offset) == '.')
    {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            return false;
        }
        while (offset < length)
        {
            if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
            {
                if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
                {
                    tokens.insertLast(@Token(NUMBER, tokenValue));
                    offset += 1;
                    return true;
                }
            }
            else
            {
                break;
            }
        }
    }
    if (_CharGet(text, offset) == 'e' || _CharGet(text, offset) == 'E') {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            return false;
        }
    }
    if (_CharGet(text, offset) == '+' || _CharGet(text, offset) == '-') {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            return false;
        }
    }
    if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
    {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            tokens.insertLast(@Token(NUMBER, tokenValue));
            offset += 1;
            return true;
        }
    }
    while (offset < length)
    {
        if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
        {
            if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
            {
                tokens.insertLast(@Token(NUMBER, tokenValue));
                offset += 1;
                return true;
            }
        }
        else
        {
            break;
        }
    }
    tokens.insertLast(@Token(NUMBER, tokenValue));
    return true;
}


bool eatStringToken(const string& text, uint& offset, uint length, array<Token@>@ tokens)
{
    string tokenValue = "";
    uint tokenLength = 0;
    offset += 1;

    while (offset < length)
    {
        if (_CharGet(text, offset) == '"') // end of string
        {
            tokens.insertLast(@Token(STRING, tokenValue));
            offset += 1;
            return true;
        }
        else if (_CharGet(text, offset) == 92) // escape sequence
        {
            offset += 1;
            if (offset >= length)
            {
                return false;
            }
            switch (_CharGet(text, offset))
            {
            case '"':
            case '/':
            case 92:
                growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset));
                break;
            case 'b':
                growToken(tokenValue, tokenLength, offset, length, 8);
                break;
            case 'f':
                growToken(tokenValue, tokenLength, offset, length, 12);
                break;
            case 'n':
                growToken(tokenValue, tokenLength, offset, length, 10);
                break;
            case 'r':
                growToken(tokenValue, tokenLength, offset, length, 13);
                break;
            case 't':
                growToken(tokenValue, tokenLength, offset, length, 9);
                break;
            case 'u': // TODO: implement unicode sequence
                offset += 5;
                if (offset >= length)
                {
                    return false;
                }
            }
        }
        else
        {
            growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset));
        }
    }
    return false;
}


bool eatLiteralToken(const string& text, uint& offset, string@ match, array<Token@>@ tokens)
{
    uint tokenLength = _CharLength(match);

    if (offset + tokenLength > _CharLength(text))
    {
        return false;
    }
    for (uint i = 1; i < tokenLength; i += 1)
    {
        if (_CharGet(text, offset + i) != _CharGet(match, i))
        {
            return false;
        }
    }
    tokens.insertLast(@Token(TokenType(_CharGet(text, offset)), ""));
    offset += tokenLength;
    return true;
}


void eatStructuralToken(const string& text, uint& offset, array<Token@>@ tokens)
{
    tokens.insertLast(@Token(TokenType(_CharGet(text, offset)), ""));
    offset += 1;
}


void eatWhitespace(const string& text, uint& offset, uint length)
{
    offset += 1;
    while (offset < length)
    {
        switch (_CharGet(text, offset))
        {
            case 9:
            case 10:
            case 13:
            case 32:
                offset += 1;
                break;
            default:
                return;
        }
    }
}


bool tokenize(const string& text, array<Token@>@ tokens)
{
    uint length = _CharLength(text);
    uint offset = 0;
    uint8 symbol;

    while (offset < length)
    {
        symbol = _CharGet(text, offset);
        switch (symbol)
        {
            case 9:
            case 10:
            case 13:
            case 32:
            {
                eatWhitespace(text, offset, length);
                break;
            }
            case COMMA:
            case COLON:
            case LEFT_SQUARE_BRACKET:
            case RIGHT_SQUARE_BRACKET:
            case LEFT_CURLY_BRACKET:
            case RIGHT_CURLY_BRACKET:
            {
                eatStructuralToken(text, offset, tokens);
                break;
            }
            case TRUE:
                if (!eatLiteralToken(text, offset, "true", tokens))
                {
                    return false;
                }
                break;
            case FALSE:
                if (!eatLiteralToken(text, offset, "false", tokens))
                {
                    Log("Failed to eat literal false token " + symbol);
                    return false;
                }
                break;
            case NULL:
                if (!eatLiteralToken(text, offset, "null", tokens))
                {
                    return false;
                }
                break;
            case STRING:
            {
                if (!eatStringToken(text, offset, length, tokens))
                {
                    return false;
                }
                break;
            }
            case '-':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                if (!eatNumberToken(text, offset, length, tokens))
                {
                    return false;
                }
                break;
            }
            default:
            {
                return false;
            }
        }
    }
    return true;
}
