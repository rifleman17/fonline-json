// FOS Common
/******************************************************************************
 *                                                                            *
 *  FOnline-JSON                                                  10-08-2014  *
 *                                                                            *
 *  Module allowing you to load, save and work with JSON data.                *
 *  Repository: <https://github.com/rotators/fonline-json>                    *
 *                                                                            *
 ******************************************************************************/


/******************************************************************************
 *                                                                            *
 *  Functions imported via json_h.fos.                                        *
 *                                                                            *
 ******************************************************************************/

/**
  * Support for older SDK versions.
  */

#ifndef __VERSION
 #define _JSON_READSTRING_OLD
#endif

#ifdef __VERSION
 #if __VERSION < 475
  #define _JSON_READSTRING_OLD
 #endif
 #if __VERSION >= 475
  #define _JSON_READSTRING_475
 #endif
#endif

/**
 *  Parses a JSON text.
 *
 *  Takes a JSON text and produces a structure of JSON values.
 *  @param text JSON text.
 *  @return If parsing was successful returns a structure of JSON values,
 *  if there was an error returns Undefined value.
 */
JSON@ JSONParse(const string& text)
{
    if (@undefined == null)
    {
        @undefined = @Undefined();
    }
    auto tokens = array<Token@>();
    if (tokenize(text, tokens))
    {
        return parse(@tokens);
    }
    return @undefined;
}

/**
 *  Loads a JSON file.
 *
 *  Loads a JSON text from a file and produces a structure of JSON values.
 *  @param  path Path to the JSON file.
 *  @return If parsing was successful returns a structure of JSON values,
 *  if there was an error returns Undefined value.
 */
JSON@ JSONLoad(const string& path)
{
    if (@undefined == null)
    {
        @undefined = @Undefined();
    }
    file f = file();
    if (f.open(path, "r") == 0)
    {

        int size = f.getSize();
        #ifdef _JSON_READSTRING_OLD
        string text = "";
        if (f.readString(size, text) == size && f.close() <= 0)
        #endif
        #ifdef _JSON_READSTRING_475
        // Skip sanity check due to differences in string::length() and file::getSize()
        string text = f.readString(size);
        f.close();
        #endif
        {
            return JSONParse(text);
        }
    }

    return @undefined;
}

/******************************************************************************
 *                                                                            *
 *  FOnline-JSON header                                                       *
 *                                                                            *
 ******************************************************************************/

#ifndef __JSON_H__
#define __JSON_H__

//  If you are using FOnline revision 399 or earlier, uncomment the line below:
//  #define _JSON_REV_PRE400

shared interface JSON
{
    //  Checking the type of a JSON value.
    //
    bool isUndefined();
    bool isNull();
    bool isBoolean();
    bool isString();
    bool isNumber();
    bool isObject();
    bool isArray();

    //  Retrieving data from a JSON value.
    //
    JSON@ opShr(bool& value);
    JSON@ opShr(string& value);
    JSON@ opShr(int8& value);
    JSON@ opShr(int16& value);
    JSON@ opShr(int32& value);
    JSON@ opShr(int64& value);
    JSON@ opShr(uint8& value);
    JSON@ opShr(uint16& value);
    JSON@ opShr(uint32& value);
    JSON@ opShr(uint64& value);
    JSON@ opShr(float& value);
    JSON@ opShr(double& value);
    JSON@ opShr(array<bool>& value);
    JSON@ opShr(array<string>& value);
    //JSON@ opShr(array<string>& value);
    JSON@ opShr(array<int8>& value);
    JSON@ opShr(array<int16>& value);
    JSON@ opShr(array<int32>& value);
    JSON@ opShr(array<int64>& value);
    JSON@ opShr(array<uint8>& value);
    JSON@ opShr(array<uint16>& value);
    JSON@ opShr(array<uint32>& value);
    JSON@ opShr(array<uint64>& value);
    JSON@ opShr(array<float>& value);
    JSON@ opShr(array<double>& value);

    //    Storing data in a JSON value.
    //
    JSON@ opShl(const bool value);
    JSON@ opShl(const string& value);
    JSON@ opShl(const int8 value);
    JSON@ opShl(const int16 value);
    JSON@ opShl(const int32 value);
    JSON@ opShl(const int64 value);
    JSON@ opShl(const uint8 value);
    JSON@ opShl(const uint16 value);
    JSON@ opShl(const uint32 value);
    JSON@ opShl(const uint64 value);
    JSON@ opShl(const float value);
    JSON@ opShl(const double value);
    JSON@ opShl(const array<bool>& value);
    JSON@ opShl(const array<string>& value);
    //JSON@ opShl(const array<string>& value);
    JSON@ opShl(const array<int8>& value);
    JSON@ opShl(const array<int16>& value);
    JSON@ opShl(const array<int32>& value);
    JSON@ opShl(const array<int64>& value);
    JSON@ opShl(const array<uint8>& value);
    JSON@ opShl(const array<uint16>& value);
    JSON@ opShl(const array<uint32>& value);
    JSON@ opShl(const array<uint64>& value);
    JSON@ opShl(const array<float>& value);
    JSON@ opShl(const array<double>& value);

    //    Stuff for JSON Objects.
    //
    bool hasProperty(const string& key);
    void setProperty(const string& key, JSON@ value);
    array<string> getKeys();
    JSON@ opIndex(const string& key);

    //  Stuff for JSON Arrays.
    //
    uint length();
    void push(JSON@ value);
    JSON@ opIndex(const uint index);
    
    //  Because of a bug in old AngelScript, JSON::forEach is available only in
    //  FOnline revisions 400+. Earlier revisions can use equivalent functions
    //  implemented directly in this header file. If you want to keep the code
    //  compatible for both cases, use _JSON_ForEach() macro for iteration.
    //
    #ifndef _JSON_REV_PRE400
        void forEach(JSONForEachIndex@ callback);
        void forEach(JSONForEachIndexAll@ callback);
        void forEach(JSONForEachKey@ callback);
        void forEach(JSONForEachKeyAll@ callback);
        #define _JSON_ForEach #(_value, _callback) _value.forEach(_callback)
    #endif

    //  Stringification - converts a JSON value into a valid JSON text.
    //  Use space argument to control style of the indentation.
    //
    string stringify();
    string stringify(uint space);
    string stringify(const string& space);

    //  File saving
    //
    //
    bool save(const string& path);
}

////////////////////////////////////////////////////////////////////////////////
//
//  ForEach for revisions 399 and earlier.
//
#ifdef _JSON_REV_PRE400
    void JSONForEach(JSON@ value, JSONForEachIndex@ callback)
    {
        if (@value != null && value.isArray())
        {
            for (uint i = 0, j = value.length(); i < j; i++)
            {
                callback(value[i], i);
            }
        }
    }
    void JSONForEach(JSON@ value, JSONForEachIndexAll@ callback)
    {
        if (@value != null && value.isArray())
        {
            for (uint i = 0, j = value.length(); i < j; i++)
            {
                callback(value[i], i, value);
            }
        }
    }
    void JSONForEach(JSON@ value, JSONForEachKey@ callback)
    {
        if (@value != null && value.isObject())
        {
            array<string> keys = value.getKeys();
            for (uint i = 0, j = keys.length(); i < j; i++)
            {
                callback(value[keys[i]], keys[i]);
            }
        }
    }
    void JSONForEach(JSON@ value, JSONForEachKeyAll@ callback)
    {
        if (@value != null && value.isObject())
        {
            array<string> keys = value.getKeys();
            for (uint i = 0, j = keys.length(); i < j; i++)
            {
                callback(value[keys[i]], keys[i], value);
            }
        }
    }
    #define _JSON_ForEach #(_value, _callback) JSONForEach(_value, _callback)
#endif


////////////////////////////////////////////////////////////////////////////////
//
// Funcdefs of ForEach callbacks.
//
funcdef void JSONForEachKey(JSON@ value, const string& key);
funcdef void JSONForEachKeyAll(JSON@ value, const string& key, JSON@ all);
funcdef void JSONForEachIndex(JSON@ value, uint index);
funcdef void JSONForEachIndexAll(JSON@ value, uint index, JSON@ all);


/******************************************************************************
 *                                                                            *
 *  Miscellaneous macros and functions used in the module.                    *
 *                                                                            *
 ******************************************************************************/

/**
 *  Compatibility macros.
 */
#ifdef _JSON_REV_PRE400
    #define _CharGet    #(s, i)    s[i]
    #define _CharSet    #(s, i, v) s[i] = v
    #define _CharAdd    #(s, v)    {                             \
                                       uint len = s.length();    \
                                       s.resize(len + 1);        \
                                       s[len] = v;               \
                                   }
    #define _CharLength #(s)       s.length()
    #define _CharResize #(s, v)    s.resize(v)
    #define _ToFloat    #(s, v)    StrToFloat(s, v)
    #define _ToInteger  #(s, v)    StrToInt(s, v)
#endif

#ifndef _JSON_REV_PRE400
    #define _CharGet    #(s, i)    s.rawGet(i)
    #define _CharSet    #(s, i, v) s.rawSet(i, v)
    #define _CharAdd    #(s, v)    {                             \
                                       uint len = s.rawLength(); \
                                       s.rawResize(len + 1);     \
                                       s.rawSet(len, v);         \
                                   }
    #define _CharLength #(s)       s.rawLength()
    #define _CharResize #(s, v)    s.rawResize(v)
    #define _ToFloat    #(s, v)    v = s.toFloat();
    #define _ToInteger  #(s, v)    v = s.toInt();
#endif

/**
 *  Other macros.
 */
#define _IsWhitespace   #(c)       (c == 9 || c == 10 || c == 13 || c == 32)



/**
 *  controlChars table.
 *
 *  Array with JSON-compatible escape codes of control characters (0x00 - 0x1F).
 *  Used by Escape() function.
 */
array<string> controlChars = {
    "\\u0000",  "\\u0001",  "\\u0002",  "\\u0003",
    "\\u0004",  "\\u0005",  "\\u0006",  "\\u0007",
    "\\b",      "\\t",      "\\n",      "\\u000B",
    "\\f",      "\\r",      "\\u000E",  "\\u000F",
    "\\u0010",  "\\u0011",  "\\u0012",  "\\u0013",
    "\\u0014",  "\\u0015",  "\\u0016",  "\\u0017",
    "\\u0018",  "\\u0019",  "\\u001A",  "\\u001B",
    "\\u001C",  "\\u001D",  "\\u001E",  "\\u001F"
};

/**
 * Indent table.
 *
 * Used by JSON::stringify(uint space).
 */
array<string> indent = {
    "",
    " ",
    "  ",
    "   ",
    "    ",
    "     ",
    "      ",
    "       ",
    "        ",
    "         ",
    "          "
};

/**
 *  JSON String escaping.
 */
string EscapeString(string& str)
{
    string escapedString = "";
    uint length = _CharLength(str);
    uint8 ch = 0;
    for (uint i = 0; i < length; i++)
    {
        ch = _CharGet(str, i);
        if (ch == 34 || ch == 92)
        {
            _CharAdd(escapedString, 92);
            _CharAdd(escapedString, ch);
        }
        else if (ch < 32)
        {
            escapedString += controlChars[ch];
        }
        else
        {
            _CharAdd(escapedString, ch);
        }
    }
    return escapedString;
}

////////////////////////////////////////////////////////////////////////////////
//
//  Stringification
//  Converts a JSON value(s) into a JSON text.
//
string Stringify(JSON@ value, const string& space, string& indent)
{
    if (@value == null || value.isUndefined())
    {
        return "";
    }
    else if (value.isNull())
    {

        return "null";
    }
    else if (value.isBoolean())
    {
        bool v = false;
        value >> v;
        if (v)
        {
            return "true";
        }
        return "false";
    }
    else if (value.isNumber())
    {
        double v = 0;
        value >> v;
        string s = "" + v;
        for (uint i = 0, j = _CharLength(s); i < j; i++)
        {
            if (_CharGet(s, i) == ',')
            {
                _CharSet(s, i, '.');
                break;
            }
        }
        return s;
    }
    else if (value.isString())
    {
        string s;
        value >> s;
        s = "\"" + EscapeString(s) + "\"";
        return s;
    }

    string s = "";
    bool compact = (space.length() == 0);
    string newIndent = indent + space;

    if (value.isObject())
    {
        s = (compact ? "{" : "{\n");
        array<string> keys = value.getKeys();
        for (uint i = 0, j = keys.length(); i < j; i++)
        {
            s += newIndent + "\"" + keys[i] + (compact ? "\":" : "\": ");
            s += Stringify(value[keys[i]], space, newIndent);
            if (i < j - 1)
            {
                s += (compact ? "," : ",\n");
            }
        }
        s += (compact ? "}" : "\n" + indent + "}");
    }
    else if (value.isArray())
    {
        s = (compact ? "[" : "[\n");
        for (uint i = 0, j = value.length(); i < j; i++)
        {
            s += newIndent + Stringify(value[i], space, newIndent);
            if (i < j - 1)
            {
                s += (compact ? "," : ",\n");
            }
        }
        s += (compact ? "]" : "\n" + indent + "]");
    }
    return s;
}
////// FOS Common


/******************************************************************************
 *                                                                            *
 *  PARSER                                                                    *
 *  Takes an array of JSON tokens and produces a structure of JSON values.    *
 *                                                                            *
 ******************************************************************************/

/**
 * Initializes the parser.
 *
 * Resets the token index and calls parseValue() for the first token.
 */
JSON@ parse(array<Token@>@ tokens)
{
    if (tokens.length() == 0)
    {
        return @undefined;
    }
    uint tokenIndex = 0;
    return @parseValue(tokens, tokenIndex);
}

/**
 * Parses one or more tokens and returns a JSON value.
 *
 * To parse arrays and objects the function uses recursion.
 */
JSON@ parseValue(array<Token@>@ tokens, uint& tokenIndex)
{
    switch (tokens[tokenIndex].type)
    {
        case TokenType::NULL:
            tokenIndex++;
            return @Null();
        case TokenType::TRUE:
            tokenIndex++;
            return @Boolean(true);
        case TokenType::FALSE:
            tokenIndex++;
            return @Boolean(false);
        case TokenType::NUMBER:
        {
            float f = 0;
            _ToFloat(tokens[tokenIndex].value, f);
            JSON@ value = Number(f);
            tokenIndex++;
            return @value;
        }
        case TokenType::INTEGER:
        {
            int i = 0;
            _ToInteger(tokens[tokenIndex].value, i);
            JSON@ value = Number(i);
            tokenIndex++;
            return @value;
        }
        case TokenType::STRING:
        {
            JSON@ value = String(tokens[tokenIndex].value);
            tokenIndex++;
            return @value;
        }
        case TokenType::LEFT_CURLY_BRACKET:
        {
            JSON@ obj = Object();
            while (tokenIndex < tokens.length())
            {
                tokenIndex++;
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected object key or end of object.");
                    return @undefined;
                }
                if (tokens[tokenIndex].type == TokenType::RIGHT_CURLY_BRACKET)
                {
                    return @obj;
                }
                string key = tokens[tokenIndex].value;

                tokenIndex++;
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected ':', found end of tokens.");
                    return @undefined;
                }
                if (tokens[tokenIndex].type != TokenType::COLON)
                {
                    Log("JSON parser: expected ':', found other token.");
                    return @undefined;
                }

                tokenIndex++;
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected a value, found end of tokens.");
                    return @undefined;
                }
                JSON@ val = parseValue(tokens, tokenIndex);

                obj.setProperty(key, @val);
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: expected ',' or '}', found tokens end.");
                    return @undefined;
                }

                if (tokens[tokenIndex].type == TokenType::RIGHT_CURLY_BRACKET)
                {
                    tokenIndex++;
                    return @obj;
                }
                if (tokens[tokenIndex].type != TokenType::COMMA)
                {
                    Log("JSON parser: expected ',' found other token.");
                    return @undefined;
                }
            }
        }
        case TokenType::LEFT_SQUARE_BRACKET:
        {
            JSON@ arr = Array();
            while (tokenIndex < tokens.length())
            {
                tokenIndex++;
                if (tokenIndex >= tokens.length()) return @undefined;
                if (tokens[tokenIndex].type == TokenType::RIGHT_SQUARE_BRACKET)
                {
                    tokenIndex++;
                    return @arr;
                }
                JSON@ val = parseValue(tokens, tokenIndex);
                arr.push(@val);
                if (tokenIndex >= tokens.length())
                {
                    Log("JSON parser: trailing comma in array.");
                    return @undefined;
                }
                if (tokens[tokenIndex].type == TokenType::RIGHT_SQUARE_BRACKET)
                {
                    tokenIndex++;
                    return @arr;
                }
                if (tokens[tokenIndex].type != TokenType::COMMA)
                {
                    Log("JSON parser: expected ',' or ']', found other token.");
                    return @undefined;
                }
            }
        }
    }

    Log("JSON parser: unexpected token.");
    return @undefined;

}
////// FOS Common
/******************************************************************************
 *                                                                            *
 *  TOKENIZER                                                                 *
 *  Takes a JSON text and produces an array of JSON tokens.                   *
 *                                                                            *
 ******************************************************************************/

enum TokenType
{
    LEFT_SQUARE_BRACKET  = '[',
    RIGHT_SQUARE_BRACKET = ']',
    LEFT_CURLY_BRACKET   = '{',
    RIGHT_CURLY_BRACKET  = '}',
    COMMA                = ',',
    COLON                = ':',
    TRUE                 = 't',
    FALSE                = 'f',
    NULL                 = 'n',
    STRING               = '"',
    NUMBER               = '#',
    INTEGER              = 'I'
}

class Token
{
    TokenType type;
    string value;

    uint row;
    uint col;

    Token(TokenType type, string value)
    {
        this.type = type;
        this.value = value;
    }
    string name()
    {
        switch (this.type)
        {
            case TokenType::LEFT_SQUARE_BRACKET:
                return "[";
            case TokenType::RIGHT_SQUARE_BRACKET:
                return "]";
            case TokenType::LEFT_CURLY_BRACKET:
                return "{";
            case TokenType::RIGHT_CURLY_BRACKET:
                return "}";
            case TokenType::COMMA:
                return ",";
            case TokenType::COLON:
                return ":";
            case TokenType::TRUE:
                return "true";
            case TokenType::FALSE:
                return "false";
            case TokenType::NULL:
                return "null";
            case TokenType::STRING:
                return "string";
            case TokenType::NUMBER:
            case TokenType::INTEGER:
                return "number";
        }
        return "unknown";
    }
}


//  Returns true if reached end of text
bool growToken(string& tokenValue, uint& tokenLength, uint& offset, uint length, uint8 character)
{
    tokenLength++;
    _CharAdd(tokenValue, character);
    offset++;
    return offset >= length;
}


bool eatNumberToken(const string& text, uint& offset, uint length, array<Token@>@ tokens)
{
    string tokenValue = "";
    uint tokenLength = 0;
    TokenType tokenType = TokenType::INTEGER;

    if (_CharGet(text, offset) == '-')
    {
        if (growToken(tokenValue, tokenLength, offset, length, '-'))
        {
            return false;
        }
    }
    if (_CharGet(text, offset) == '0')
    {
        if (growToken(tokenValue, tokenLength, offset, length, '0'))
        {
            tokens.insertLast(@Token(tokenType, tokenValue));
            offset++;
            return true;
        }
    }
    else if (_CharGet(text, offset) >= '1' && _CharGet(text, offset) <= '9')
    {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            tokens.insertLast(@Token(tokenType, tokenValue));
            offset++;
            return true;
        }
        while (offset < length)
        {
            if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
            {
                if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
                {
                    tokens.insertLast(@Token(tokenType, tokenValue));
                    offset++;
                    return true;
                }
            }
            else
            {
                break;
            }
        }
    }
    if (_CharGet(text, offset) == '.')
    {
        tokenType = TokenType::NUMBER;
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            return false;
        }
        while (offset < length)
        {
            if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
            {
                if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
                {
                    tokens.insertLast(@Token(tokenType, tokenValue));
                    offset++;
                    return true;
                }
            }
            else
            {
                break;
            }
        }
    }
    if (_CharGet(text, offset) == 'e' || _CharGet(text, offset) == 'E') {
        tokenType = TokenType::NUMBER;
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            return false;
        }
    }
    if (_CharGet(text, offset) == '+' || _CharGet(text, offset) == '-') {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            return false;
        }
    }
    if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
    {
        if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
        {
            tokens.insertLast(@Token(tokenType, tokenValue));
            offset++;
            return true;
        }
    }
    while (offset < length)
    {
        if (_CharGet(text, offset) >= '0' && _CharGet(text, offset) <= '9')
        {
            if (growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset)))
            {
                tokens.insertLast(@Token(tokenType, tokenValue));
                offset++;
                return true;
            }
        }
        else
        {
            break;
        }
    }
    tokens.insertLast(@Token(tokenType, tokenValue));
    return true;
}


bool eatStringToken(const string& text, uint& offset, uint length, array<Token@>@ tokens)
{
    string tokenValue = "";
    uint tokenLength = 0;
    offset++;

    while (offset < length)
    {
        if (_CharGet(text, offset) == '"') // end of string
        {
            tokens.insertLast(@Token(TokenType::STRING, tokenValue));
            offset++;
            return true;
        }
        else if (_CharGet(text, offset) == 92) // escape sequence
        {
            offset++;
            if (offset >= length)
            {
                return false;
            }
            switch (_CharGet(text, offset))
            {
            case '"':
            case '/':
            case 92:
                growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset));
                break;
            case 'b':
                growToken(tokenValue, tokenLength, offset, length, 8);
                break;
            case 'f':
                growToken(tokenValue, tokenLength, offset, length, 12);
                break;
            case 'n':
                growToken(tokenValue, tokenLength, offset, length, 10);
                break;
            case 'r':
                growToken(tokenValue, tokenLength, offset, length, 13);
                break;
            case 't':
                growToken(tokenValue, tokenLength, offset, length, 9);
                break;
            case 'u': // TODO: implement unicode sequence
                offset += 5;
                if (offset >= length)
                {
                    return false;
                }
            }
        }
        else
        {
			growToken(tokenValue, tokenLength, offset, length, _CharGet(text, offset));
        }
    }
    return false;
}


bool eatLiteralToken(const string& text, uint& offset, string match, array<Token@>@ tokens)
{
    uint tokenLength = _CharLength(match);

    if (offset + tokenLength > _CharLength(text))
    {
        return false;
    }
    for (uint i = 1; i < tokenLength; i++)
    {
        if (_CharGet(text, offset + i) != _CharGet(match, i))
        {
            return false;
        }
    }
    tokens.insertLast(@Token(TokenType(_CharGet(text, offset)), ""));
    offset += tokenLength;
    return true;
}


void eatStructuralToken(const string& text, uint& offset, array<Token@>@ tokens)
{
    tokens.insertLast(@Token(TokenType(_CharGet(text, offset)), ""));
    offset++;
}


void eatWhitespace(const string& text, uint& offset, uint length)
{
    offset++;
    while (offset < length)
    {
        switch (_CharGet(text, offset))
        {
            case 9:
            case 10:
            case 13:
            case 32:
                offset++;
                break;
            default:
                return;
        }
    }
}


bool tokenize(const string& text, array<Token@>@ tokens)
{
    uint length = _CharLength(text);
    uint offset = 0;
    uint8 symbol;

    // Skip UTF-8 BOM
    if (length > 2)
    {
        if (_CharGet(text, 0) == 239 &&
            _CharGet(text, 1) == 187 &&
            _CharGet(text, 2) == 191)
        {
            offset += 3;
        }
    }

    while (offset < length)
    {
        symbol = _CharGet(text, offset);
        switch (symbol)
        {
            case 9:
            case 10:
            case 13:
            case 32:
            {
                eatWhitespace(text, offset, length);
                break;
            }
            case TokenType::COMMA:
            case TokenType::COLON:
            case TokenType::LEFT_SQUARE_BRACKET:
            case TokenType::RIGHT_SQUARE_BRACKET:
            case TokenType::LEFT_CURLY_BRACKET:
            case TokenType::RIGHT_CURLY_BRACKET:
            {
                eatStructuralToken(text, offset, tokens);
                break;
            }
            case TokenType::TRUE:
                if (!eatLiteralToken(text, offset, "true", tokens))
                {
                    return false;
                }
                break;
            case TokenType::FALSE:
                if (!eatLiteralToken(text, offset, "false", tokens))
                {
                    Log("Failed to eat literal false token " + symbol);
                    return false;
                }
                break;
            case TokenType::NULL:
                if (!eatLiteralToken(text, offset, "null", tokens))
                {
                    return false;
                }
                break;
            case TokenType::STRING:
            {
                if (!eatStringToken(text, offset, length, tokens))
                {
                    return false;
                }
                break;
            }
            case '-':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                if (!eatNumberToken(text, offset, length, tokens))
                {
                    return false;
                }
                break;
            }
            default:
            {
                return false;
            }
        }
    }
    return true;
}

/******************************************************************************
 *                                                                            *
 *  JSON VALUE CLASSES                                                        *
 *                                                                            *
 ******************************************************************************/

JSON@ undefined;

class Value : JSON
{
    bool isUndefined()                 { return false; }
    bool isNull()                      { return false; }
    bool isBoolean()                   { return false; }
    bool isString()                    { return false; }
    bool isNumber()                    { return false; }
    bool isObject()                    { return false; }
    bool isArray()                     { return false; }

    JSON@ opShr(bool& value)                 { return this; }
    JSON@ opShr(string& value)               { return this; }
    JSON@ opShr(int8& value)                 { return this; }
    JSON@ opShr(int16& value)                { return this; }
    JSON@ opShr(int32& value)                { return this; }
    JSON@ opShr(int64& value)                { return this; }
    JSON@ opShr(uint8& value)                { return this; }
    JSON@ opShr(uint16& value)               { return this; }
    JSON@ opShr(uint32& value)               { return this; }
    JSON@ opShr(uint64& value)               { return this; }
    JSON@ opShr(float& value)                { return this; }
    JSON@ opShr(double& value)               { return this; }
    JSON@ opShr(array<bool>& value)          { return this; }
    JSON@ opShr(array<string>& value)        { return this; }
//    JSON@ opShr(array<string@>& value)       { return this; }
    JSON@ opShr(array<int8>& value)          { return this; }
    JSON@ opShr(array<int16>& value)         { return this; }
    JSON@ opShr(array<int32>& value)         { return this; }
    JSON@ opShr(array<int64>& value)         { return this; }
    JSON@ opShr(array<uint8>& value)         { return this; }
    JSON@ opShr(array<uint16>& value)        { return this; }
    JSON@ opShr(array<uint32>& value)        { return this; }
    JSON@ opShr(array<uint64>& value)        { return this; }
    JSON@ opShr(array<float>& value)         { return this; }
    JSON@ opShr(array<double>& value)        { return this; }

    JSON@ opShl(const bool value)            { return this; }
    JSON@ opShl(const string& value)         { return this; }
    JSON@ opShl(const int8 value)            { return this; }
    JSON@ opShl(const int16 value)           { return this; }
    JSON@ opShl(const int32 value)           { return this; }
    JSON@ opShl(const int64 value)           { return this; }
    JSON@ opShl(const uint8 value)           { return this; }
    JSON@ opShl(const uint16 value)          { return this; }
    JSON@ opShl(const uint32 value)          { return this; }
    JSON@ opShl(const uint64 value)          { return this; }
    JSON@ opShl(const float value)           { return this; }
    JSON@ opShl(const double value)          { return this; }
    JSON@ opShl(const array<bool>& value)    { return this; }
    JSON@ opShl(const array<string>& value)  { return this; }
    //JSON@ opShl(const array<string@>& value) { return this; }
    JSON@ opShl(const array<int8>& value)    { return this; }
    JSON@ opShl(const array<int16>& value)   { return this; }
    JSON@ opShl(const array<int32>& value)   { return this; }
    JSON@ opShl(const array<int64>& value)   { return this; }
    JSON@ opShl(const array<uint8>& value)   { return this; }
    JSON@ opShl(const array<uint16>& value)  { return this; }
    JSON@ opShl(const array<uint32>& value)  { return this; }
    JSON@ opShl(const array<uint64>& value)  { return this; }
    JSON@ opShl(const array<float>& value)   { return this; }
    JSON@ opShl(const array<double>& value)  { return this; }

    bool hasProperty(const string& key)              { return false; }
    void setProperty(const string& key, JSON@ value) { return; }
    array<string> getKeys()                     { array<string> k; return k; }
    JSON@ opIndex(const string& key)            { return @undefined; }
    void forEach(JSONForEachKey@ callback)      { return; }
    void forEach(JSONForEachKeyAll@ callback)   { return; }

    uint length()                               { return 0; }
    void push(JSON@ value)                      { return; }
    JSON@ opIndex(const uint index)             { return @undefined; }
    void forEach(JSONForEachIndex@ callback)    { return; }
    void forEach(JSONForEachIndexAll@ callback) { return; }

    string stringify()
    {
        return Stringify(this, "", "");
    }

    string stringify(uint space)
    {
        if (space > 10) space = 10;
        return Stringify(this, indent[space], "");
    }

    string stringify(const string& space)
    {
        string str = space.substr( 0, 10);
        for (uint i = 0, j = str.length(); i < j; i++)
        {
            if (!_IsWhitespace(_CharGet(str, i)))
            {
                Log("Indents can contain only whitespace characters.");
                return "";
            }
        }
        return Stringify(this, str, "");
    }

    bool save(const string& path)
    {
        if (this.isUndefined())
        {
            return false;
        }
        file f = file();
        if (f.open(path, "w") == 0)
        {
            string text = Stringify(this, "  ", "");
            return (uint(f.writeString(text)) == _CharLength(text));
        }
        return false;
    }
}

final class Undefined : Value
{
    bool isUndefined()
    {
        return true;
    }
}

final class Null : Value
{
    bool isNull()
    {
        return true;
    }
}

final class Boolean : Value
{
    private bool value;

    Boolean(bool value)
    {
        this.value = value;
    }

    bool isBoolean()
    {
        return true;
    }

    JSON@ opShr(bool& value)
    {
        value = this.value;
        return this;
    }

    JSON@ opShl(const bool value)
    {
        this.value = value;
        return this;
    }
}

final class Number : Value
{
    private double value;

    Number(int8 value)   { this.value = value; }
    Number(int16 value)  { this.value = value; }
    Number(int32 value)  { this.value = value; }
    Number(int64 value)  { this.value = value; }
    Number(uint8 value)  { this.value = value; }
    Number(uint16 value) { this.value = value; }
    Number(uint32 value) { this.value = value; }
    Number(uint64 value) { this.value = value; }
    Number(float value)  { this.value = value; }
    Number(double value) { this.value = value; }

    bool isNumber()
    {
        return true;
    }

    JSON@ opShr(int8& value)   { value = int8(this.value); return this; }
    JSON@ opShr(int16& value)  { value = int16(this.value); return this; }
    JSON@ opShr(int32& value)  { value = int32(this.value); return this; }
    JSON@ opShr(int64& value)  { value = int64(this.value); return this; }
    JSON@ opShr(uint8& value)  { value = uint8(this.value); return this; }
    JSON@ opShr(uint16& value) { value = uint16(this.value); return this; }
    JSON@ opShr(uint32& value) { value = uint32(this.value); return this; }
    JSON@ opShr(uint64& value) { value = uint64(this.value); return this; }
    JSON@ opShr(float& value)  { value = float(this.value); return this; }
    JSON@ opShr(double& value) { value = this.value; return this; }

    JSON@ opShl(const int8 value)   { this.value = value; return this; }
    JSON@ opShl(const int16 value)  { this.value = value; return this; }
    JSON@ opShl(const int32 value)  { this.value = value; return this; }
    JSON@ opShl(const int64 value)  { this.value = value; return this; }
    JSON@ opShl(const uint8 value)  { this.value = value; return this; }
    JSON@ opShl(const uint16 value) { this.value = value; return this; }
    JSON@ opShl(const uint32 value) { this.value = value; return this; }
    JSON@ opShl(const uint64 value) { this.value = value; return this; }
    JSON@ opShl(const float value)  { this.value = value; return this; }
    JSON@ opShl(const double value) { this.value = value; return this; }
}

final class String : Value
{
    private string value;

    String(const string& value)
    {
        this.value = value;
    }

    bool isString()
    {
        return true;
    }

    uint length()
    {
        return value.length();
    }

    JSON@ opShr(string& value)
    {
        value = this.value;
        return this;
    }

    JSON@ opShl(const string& value)
    {
        this.value = value;
        return this;
    }
}

final class Object : Value
{
    private dictionary properties = {};
    private array<string>keys = {};

    bool isObject()
    {
        return true;
    }

    bool hasProperty(const string& key)
    {
        return this.properties.exists(key);
    }

    void setProperty(const string& key, JSON@ value)
    {
        if (@value == null || value.isUndefined())
        {
            return;
        }
        if (!this.properties.exists(key))
        {
            keys.insertLast(key);
        }
        properties.set(key, @value);
    }

    array<string> getKeys()
    {
        return this.keys;
    }

    void forEach(JSONForEachKey@ callback)
    {
        JSON@ value;
        for (uint i = 0, j = this.keys.length(); i < j; i++)
        {
            properties.get(this.keys[i], @value);
            callback(value, this.keys[i]);
        }
    }
    void forEach(JSONForEachKeyAll@ callback)
    {
        JSON@ value;
        for (uint i = 0, j = this.keys.length(); i < j; i++)
        {
            properties.get(this.keys[i], @value);
            callback(value, this.keys[i], this);
        }
    }

    JSON@ opIndex(const string& key)
    {
        if (this.hasProperty(key))
        {
            JSON@ value;
            properties.get(key, @value);
            return @value;
        }
        else
        {
            return @undefined;
        }
    }
}

final class Array : Value
{
    private array<JSON@> elements = {};

    bool isArray()
    {
        return true;
    }

    #define _RetrieveArray #(_type, _isType, _init)                            \
    JSON@ opShr(array<_type>& retrieve)                                        \
    {                                                                          \
        for (uint i = 0, j = this.elements.length(); i < j; i++)               \
        {                                                                      \
            if (this.elements[i]._isType())                                    \
            {                                                                  \
                _type value = _init;                                           \
                this.elements[i] >> value;                                     \
                retrieve.insertLast(value);                                    \
            }                                                                  \
                                                                               \
        }                                                                      \
        return this;                                                           \
    }

    _RetrieveArray(bool, isBoolean, false);
    _RetrieveArray(string, isString, "");
    //_RetrieveArray(string@, isString, "");
    _RetrieveArray(int8, isNumber, 0);
    _RetrieveArray(int16, isNumber, 0);
    _RetrieveArray(int32, isNumber, 0);
    _RetrieveArray(int64, isNumber, 0);
    _RetrieveArray(uint8, isNumber, 0);
    _RetrieveArray(uint16, isNumber, 0);
    _RetrieveArray(uint32, isNumber, 0);
    _RetrieveArray(uint64, isNumber, 0);
    _RetrieveArray(float, isNumber, 0);
    _RetrieveArray(double, isNumber, 0);

    #define _StoreArray #(_type, _JSONType)                                    \
    JSON@ opShl(const array<_type>& store)                                     \
    {                                                                          \
        for (uint i = 0, j = store.length(); i < j; i++)                       \
        {                                                                      \
            this.push(_JSONType(store[i]));                                    \
        }                                                                      \
        return this;                                                           \
    }                                                                          \

    _StoreArray(bool, Boolean);
    _StoreArray(string, String);
//    _StoreArray(string, String);
    _StoreArray(int8, Number);
    _StoreArray(int16, Number);
    _StoreArray(int32, Number);
    _StoreArray(int64, Number);
    _StoreArray(uint8, Number);
    _StoreArray(uint16, Number);
    _StoreArray(uint32, Number);
    _StoreArray(uint64, Number);
    _StoreArray(float, Number);
    _StoreArray(double, Number);


    uint length()
    {
        return this.elements.length();
    }

    void push(JSON@ value)
    {
        if (@value == null || value.isUndefined())
        {
            return;
        }
        this.elements.insertLast(@value);
    }

    void forEach(JSONForEachIndex@ callback)
    {
        for (uint i = 0, j = elements.length(); i < j; i++)
        {
            callback(elements[i], i);
        }
    }
    void forEach(JSONForEachIndexAll@ callback)
    {
        for (uint i = 0, j = elements.length(); i < j; i++)
        {
            callback(elements[i], i, this);
        }
    }

    JSON@ opIndex(const uint index)
    {
        if (index < this.elements.length())
        {
            return this.elements[index];
        }
        else
        {
            return @undefined;
        }
    }
}

JSON@ JSONNull()               { return @Null(); }
JSON@ JSONBoolean(bool value)  { return @Boolean(value); }
JSON@ JSONNumber(int8 value)   { return @Number(value); }
JSON@ JSONNumber(int16 value)  { return @Number(value); }
JSON@ JSONNumber(int32 value)  { return @Number(value); }
JSON@ JSONNumber(int64 value)  { return @Number(value); }
JSON@ JSONNumber(uint8 value)  { return @Number(value); }
JSON@ JSONNumber(uint16 value) { return @Number(value); }
JSON@ JSONNumber(uint32 value) { return @Number(value); }
JSON@ JSONNumber(uint64 value) { return @Number(value); }
JSON@ JSONNumber(float value)  { return @Number(value); }
JSON@ JSONNumber(double value) { return @Number(value); }
JSON@ JSONString(string value) { return @String(value); }
JSON@ JSONObject()             { return @Object(); }
JSON@ JSONArray()              { return @Array(); }
