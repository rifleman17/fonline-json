// Takes array of JSON tokens and produces JSON values

JSON@ parseValue(array<Token@>@ tokens, uint& ti)
{
    switch (tokens[ti].type)
    {
    case NULL:
        ti += 1;
        return @Null();
    case TRUE:
        ti += 1;
        return @Boolean(true);
    case FALSE:
        ti += 1;
        return @Boolean(false);
    case NUMBER:
    {
        JSON@ value = Number(StrToDouble(tokens[ti].value));
        ti += 1;
        return @value;
    }
    case STRING:
    {
        JSON@ value = String(tokens[ti].value);
        ti += 1;
        return @value;
    }
    case LEFT_CURLY_BRACKET:
    {
        JSON@ obj = Object();
        while (ti < tokens.length())
        {
            ti += 1;
            if (ti >= tokens.length()) return @undefined;
            if (tokens[ti].type == RIGHT_CURLY_BRACKET)
            {
                return @obj;
            }
            string key = tokens[ti].value;

            ti += 1;
            if (ti >= tokens.length()) return @undefined;
            if (tokens[ti].type != COLON) return @undefined;

            ti += 1;
            if (ti >= tokens.length())
            {
                return @undefined;
            }
            JSON@ val = parseValue(tokens, ti);

            obj.setProperty(key, @val);
            if (ti >= tokens.length())
            {
                return @undefined;
            }

            if (tokens[ti].type == RIGHT_CURLY_BRACKET)
            {
                ti += 1;
                return @obj;
            }
            if (tokens[ti].type != COMMA)
            {
                return @undefined;
            }
        }
    }
    case LEFT_SQUARE_BRACKET:
    {
        JSON@ arr = Array();
        while (ti < tokens.length())
        {
            ti += 1;
            if (ti >= tokens.length()) return @undefined;
            if (tokens[ti].type == RIGHT_SQUARE_BRACKET)
            {
                ti += 1;
                return @arr;
            }
            JSON@ val = parseValue(tokens, ti);
            arr.push(@val);
            if (ti >= tokens.length()) return @undefined;
            if (tokens[ti].type == RIGHT_SQUARE_BRACKET)
            {
                ti += 1;
                return @arr;
            }
            if (tokens[ti].type != COMMA)
            {
                return @undefined;
            }
        }
    }

    default:
        return @undefined;
    }

    return @undefined;

}


JSON@ parse(array<Token@>@ tokens)
{
    if (tokens.length() == 0)
    {
        return @undefined;
    }
    uint ti = 0;
    return @parseValue(tokens, ti);
}

