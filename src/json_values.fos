JSON@ undefined;

class Value : JSON
{
    bool isUndefined() { return false; }
    bool isNull()      { return false; }
    bool isBoolean()   { return false; }
    bool isString()    { return false; }
    bool isNumber()    { return false; }
    bool isObject()    { return false; }
    bool isArray()     { return false; }

    JSON@ opShr(bool& value)   { return this; }
    JSON@ opShr(string& value) { return this; }
    JSON@ opShr(int8& value)   { return this; }
    JSON@ opShr(int16& value)  { return this; }
    JSON@ opShr(int32& value)  { return this; }
    JSON@ opShr(int64& value)  { return this; }
    JSON@ opShr(uint8& value)  { return this; }
    JSON@ opShr(uint16& value) { return this; }
    JSON@ opShr(uint32& value) { return this; }
    JSON@ opShr(uint64& value) { return this; }
    JSON@ opShr(float& value)  { return this; }
    JSON@ opShr(double& value) { return this; }

    JSON@ opShl(const bool value)    { return this; }
    JSON@ opShl(const string& value) { return this; }
    JSON@ opShl(const int8 value)    { return this; }
    JSON@ opShl(const int16 value)   { return this; }
    JSON@ opShl(const int32 value)   { return this; }
    JSON@ opShl(const int64 value)   { return this; }
    JSON@ opShl(const uint8 value)   { return this; }
    JSON@ opShl(const uint16 value)  { return this; }
    JSON@ opShl(const uint32 value)  { return this; }
    JSON@ opShl(const uint64 value)  { return this; }
    JSON@ opShl(const float value)   { return this; }
    JSON@ opShl(const double value)  { return this; }

    string@ toString()
    {
        return "";
    }

    bool hasProperty(const string& key)              { return false; }
    void setProperty(const string& key, JSON@ value) { return; }
    array<string> getKeys()                     { array<string> k; return k; }
    JSON@ opIndex(const string& key)            { return @undefined; }
    void forEach(JSONForEachKey@ callback)      { return; }
    void forEach(JSONForEachKeyAll@ callback)   { return; }

    uint length()                               { return 0; }
    void push(JSON@ value)                      { return; }
    JSON@ opIndex(const uint index)             { return @undefined; }
    void forEach(JSONForEachIndex@ callback)    { return; }
    void forEach(JSONForEachIndexAll@ callback) { return; }


    string@ stringify()
    {
        return Stringify(this, "", "");
    }
    string@ stringify(const string& space)
    {
        uint length = _CharLength(space);
        if (length > 8)
        {
            Log("Maximum space length exceeded.");
            return "";
        }
        for (uint i = 0; i < length; i++)
        {
            if (!_IsWhitespace(_CharGet(space, i)))
            {
                Log("space can contain only whitespace characters.");
                return "";
            }
        }
        return Stringify(this, space, "");
    }
}

final class Undefined : Value
{
    bool isUndefined()
    {
        return true;
    }
    string@ toString()
    {
        return "undefined";
    }
}

final class Null : Value
{
    bool isNull()
    {
        return true;
    }

    string@ toString()
    {
        return "null";
    }
}

final class Boolean : Value
{
    private bool value;

    Boolean(bool value)
    {
        this.value = value;
    }

    bool isBoolean()
    {
        return true;
    }

    JSON@ opShr(bool& value)
    {
        value = this.value;
        return this;
    }

    JSON@ opShl(const bool value)
    {
        this.value = value;
        return this;
    }

    string@ toString()
    {
        if (value)
        {
            return "true";
        }
        else
        {
            return "false";
        }
    }
}

final class Number : Value
{
    private double value;

    Number(int8 value)   { this.value = value; }
    Number(int16 value)  { this.value = value; }
    Number(int32 value)  { this.value = value; }
    Number(int64 value)  { this.value = value; }
    Number(uint8 value)  { this.value = value; }
    Number(uint16 value) { this.value = value; }
    Number(uint32 value) { this.value = value; }
    Number(uint64 value) { this.value = value; }
    Number(float value)  { this.value = value; }
    Number(double value) { this.value = value; }

    bool isNumber()
    {
        return true;
    }

    JSON@ opShr(int8& value)   { value = int8(this.value); return this; }
    JSON@ opShr(int16& value)  { value = int16(this.value); return this; }
    JSON@ opShr(int32& value)  { value = int32(this.value); return this; }
    JSON@ opShr(int64& value)  { value = int64(this.value); return this; }
    JSON@ opShr(uint8& value)  { value = uint8(this.value); return this; }
    JSON@ opShr(uint16& value) { value = uint16(this.value); return this; }
    JSON@ opShr(uint32& value) { value = uint32(this.value); return this; }
    JSON@ opShr(uint64& value) { value = uint64(this.value); return this; }
    JSON@ opShr(float& value)  { value = float(this.value); return this; }
    JSON@ opShr(double& value) { value = this.value; return this; }

    JSON@ opShl(const int8 value)   { this.value = value; return this; }
    JSON@ opShl(const int16 value)  { this.value = value; return this; }
    JSON@ opShl(const int32 value)  { this.value = value; return this; }
    JSON@ opShl(const int64 value)  { this.value = value; return this; }
    JSON@ opShl(const uint8 value)  { this.value = value; return this; }
    JSON@ opShl(const uint16 value) { this.value = value; return this; }
    JSON@ opShl(const uint32 value) { this.value = value; return this; }
    JSON@ opShl(const uint64 value) { this.value = value; return this; }
    JSON@ opShl(const float value)  { this.value = value; return this; }
    JSON@ opShl(const double value) { this.value = value; return this; }

    string@ toString()
    {
        string@ s = "" + this.value;
        for (uint i = 0, j = _CharLength(s); i < j; i++)
        {
            if (_CharGet(s, i) == ',')
            {
                _CharSet(s, i, '.');
                break;
            }
        }
        return s;
    }
}

final class String : Value
{
    private string value;

    String(string@ value)
    {
        this.value = value;
    }

    bool isString()
    {
        return true;
    }

    JSON@ opShr(string& value)
    {
        value = this.value;
        return this;
    }

    JSON@ opShl(const string& value)
    {
        this.value = value;
        return this;
    }

    string@ toString()
    {
        return value;
    }
}

final class Object : Value
{
    private dictionary properties;
    private array<string>keys;

    bool isObject()
    {
        return true;
    }

    bool hasProperty(const string& key)
    {
        return this.properties.exists(key);
    }

    void setProperty(const string& key, JSON@ value)
    {
        if (@value == null || value.isUndefined())
        {
            return;
        }
        if (!this.properties.exists(key))
        {
            keys.insertLast(key);
        }
        properties.set(key, @value);
    }

    array<string> getKeys()
    {
        return this.keys;
    }

    void forEach(JSONForEachKey@ callback)
    {
        JSON@ value;
        for (uint i = 0, j = this.keys.length(); i < j; i += 1)
        {
            properties.get(this.keys[i], @value);
            callback(value, this.keys[i]);
        }
    }
    void forEach(JSONForEachKeyAll@ callback)
    {
        JSON@ value;
        for (uint i = 0, j = this.keys.length(); i < j; i += 1)
        {
            properties.get(this.keys[i], @value);
            callback(value, this.keys[i], this);
        }
    }

    JSON@ opIndex(const string& key)
    {
        if (this.hasProperty(key))
        {
            JSON@ value;
            properties.get(key, @value);
            return @value;
        }
        else
        {
            return @undefined;
        }
    }
}

final class Array : Value
{
    private array<JSON@> elements;

    bool isArray()
    {
        return true;
    }

    uint length()
    {
        return this.elements.length();
    }

    void push(JSON@ value)
    {
        if (@value == null || value.isUndefined())
        {
            return;
        }
        this.elements.insertLast(@value);
    }

    void forEach(JSONForEachIndex@ callback)
    {
        for (uint i = 0, j = elements.length(); i < j; i += 1)
        {
            callback(elements[i], i);
        }
    }
    void forEach(JSONForEachIndexAll@ callback)
    {
        for (uint i = 0, j = elements.length(); i < j; i += 1)
        {
            callback(elements[i], i, this);
        }
    }

    JSON@ opIndex(const uint index)
    {
        if (index < this.elements.length())
        {
            return this.elements[index];
        }
        else
        {
            return @undefined;
        }
    }
}
